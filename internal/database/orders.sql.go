// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_id, customer_location_id, order_date, status, type, method, ship_date, po_number, shipping_cost, free_shipping, apply_to_commission, sales_rep, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id, created_at, updated_at, customer_id, customer_location_id, order_date, ship_date, status, type, method, po_number, shipping_cost, free_shipping, apply_to_commission, sales_rep, notes
`

type CreateOrderParams struct {
	CustomerID         int32          `json:"customer_id"`
	CustomerLocationID sql.NullInt32  `json:"customer_location_id"`
	OrderDate          time.Time      `json:"order_date"`
	Status             string         `json:"status"`
	Type               string         `json:"type"`
	Method             sql.NullString `json:"method"`
	ShipDate           time.Time      `json:"ship_date"`
	PoNumber           sql.NullString `json:"po_number"`
	ShippingCost       float64        `json:"shipping_cost"`
	FreeShipping       bool           `json:"free_shipping"`
	ApplyToCommission  bool           `json:"apply_to_commission"`
	SalesRep           sql.NullString `json:"sales_rep"`
	Notes              sql.NullString `json:"notes"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.queryRow(ctx, q.createOrderStmt, createOrder,
		arg.CustomerID,
		arg.CustomerLocationID,
		arg.OrderDate,
		arg.Status,
		arg.Type,
		arg.Method,
		arg.ShipDate,
		arg.PoNumber,
		arg.ShippingCost,
		arg.FreeShipping,
		arg.ApplyToCommission,
		arg.SalesRep,
		arg.Notes,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID,
		&i.CustomerLocationID,
		&i.OrderDate,
		&i.ShipDate,
		&i.Status,
		&i.Type,
		&i.Method,
		&i.PoNumber,
		&i.ShippingCost,
		&i.FreeShipping,
		&i.ApplyToCommission,
		&i.SalesRep,
		&i.Notes,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteOrderStmt, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, created_at, updated_at, customer_id, customer_location_id, order_date, ship_date, status, type, method, po_number, shipping_cost, free_shipping, apply_to_commission, sales_rep, notes
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.queryRow(ctx, q.getOrderStmt, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID,
		&i.CustomerLocationID,
		&i.OrderDate,
		&i.ShipDate,
		&i.Status,
		&i.Type,
		&i.Method,
		&i.PoNumber,
		&i.ShippingCost,
		&i.FreeShipping,
		&i.ApplyToCommission,
		&i.SalesRep,
		&i.Notes,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, created_at, updated_at, customer_id, customer_location_id, order_date, ship_date, status, type, method, po_number, shipping_cost, free_shipping, apply_to_commission, sales_rep, notes
FROM orders
ORDER BY order_date DESC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.query(ctx, q.listOrdersStmt, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CustomerID,
			&i.CustomerLocationID,
			&i.OrderDate,
			&i.ShipDate,
			&i.Status,
			&i.Type,
			&i.Method,
			&i.PoNumber,
			&i.ShippingCost,
			&i.FreeShipping,
			&i.ApplyToCommission,
			&i.SalesRep,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET customer_id = $2,
    customer_location_id = $3,
    order_date = $4,
    status = $5,
    type = $6,
    method = $7,
    ship_date = $8,
    po_number = $9,
    shipping_cost = $10,
    free_shipping = $11,
    apply_to_commission = $12,
    sales_rep = $13,
    notes = $14,
    updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, customer_id, customer_location_id, order_date, ship_date, status, type, method, po_number, shipping_cost, free_shipping, apply_to_commission, sales_rep, notes
`

type UpdateOrderParams struct {
	ID                 int32          `json:"id"`
	CustomerID         int32          `json:"customer_id"`
	CustomerLocationID sql.NullInt32  `json:"customer_location_id"`
	OrderDate          time.Time      `json:"order_date"`
	Status             string         `json:"status"`
	Type               string         `json:"type"`
	Method             sql.NullString `json:"method"`
	ShipDate           time.Time      `json:"ship_date"`
	PoNumber           sql.NullString `json:"po_number"`
	ShippingCost       float64        `json:"shipping_cost"`
	FreeShipping       bool           `json:"free_shipping"`
	ApplyToCommission  bool           `json:"apply_to_commission"`
	SalesRep           sql.NullString `json:"sales_rep"`
	Notes              sql.NullString `json:"notes"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.queryRow(ctx, q.updateOrderStmt, updateOrder,
		arg.ID,
		arg.CustomerID,
		arg.CustomerLocationID,
		arg.OrderDate,
		arg.Status,
		arg.Type,
		arg.Method,
		arg.ShipDate,
		arg.PoNumber,
		arg.ShippingCost,
		arg.FreeShipping,
		arg.ApplyToCommission,
		arg.SalesRep,
		arg.Notes,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID,
		&i.CustomerLocationID,
		&i.OrderDate,
		&i.ShipDate,
		&i.Status,
		&i.Type,
		&i.Method,
		&i.PoNumber,
		&i.ShippingCost,
		&i.FreeShipping,
		&i.ApplyToCommission,
		&i.SalesRep,
		&i.Notes,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    type, sku, upc, status, cost, price, envelope, artist, category, release_date, last_bought_date, description, text_front, text_inside
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
RETURNING id, created_at, updated_at, type, sku, upc, status, cost, price, envelope, artist, category, release_date, last_bought_date, description, text_front, text_inside
`

type CreateProductParams struct {
	Type           string         `json:"type"`
	Sku            string         `json:"sku"`
	Upc            string         `json:"upc"`
	Status         string         `json:"status"`
	Cost           string         `json:"cost"`
	Price          string         `json:"price"`
	Envelope       sql.NullString `json:"envelope"`
	Artist         sql.NullString `json:"artist"`
	Category       sql.NullString `json:"category"`
	ReleaseDate    sql.NullTime   `json:"release_date"`
	LastBoughtDate sql.NullTime   `json:"last_bought_date"`
	Description    sql.NullString `json:"description"`
	TextFront      sql.NullString `json:"text_front"`
	TextInside     sql.NullString `json:"text_inside"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.createProductStmt, createProduct,
		arg.Type,
		arg.Sku,
		arg.Upc,
		arg.Status,
		arg.Cost,
		arg.Price,
		arg.Envelope,
		arg.Artist,
		arg.Category,
		arg.ReleaseDate,
		arg.LastBoughtDate,
		arg.Description,
		arg.TextFront,
		arg.TextInside,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Sku,
		&i.Upc,
		&i.Status,
		&i.Cost,
		&i.Price,
		&i.Envelope,
		&i.Artist,
		&i.Category,
		&i.ReleaseDate,
		&i.LastBoughtDate,
		&i.Description,
		&i.TextFront,
		&i.TextInside,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteProductStmt, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, created_at, updated_at, type, sku, upc, status, cost, price, envelope, artist, category, release_date, last_bought_date, description, text_front, text_inside FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.queryRow(ctx, q.getProductByIDStmt, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Sku,
		&i.Upc,
		&i.Status,
		&i.Cost,
		&i.Price,
		&i.Envelope,
		&i.Artist,
		&i.Category,
		&i.ReleaseDate,
		&i.LastBoughtDate,
		&i.Description,
		&i.TextFront,
		&i.TextInside,
	)
	return i, err
}

const getProductBySKU = `-- name: GetProductBySKU :one
SELECT id, created_at, updated_at, type, sku, upc, status, cost, price, envelope, artist, category, release_date, last_bought_date, description, text_front, text_inside FROM products WHERE sku = $1
`

func (q *Queries) GetProductBySKU(ctx context.Context, sku string) (Product, error) {
	row := q.queryRow(ctx, q.getProductBySKUStmt, getProductBySKU, sku)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Sku,
		&i.Upc,
		&i.Status,
		&i.Cost,
		&i.Price,
		&i.Envelope,
		&i.Artist,
		&i.Category,
		&i.ReleaseDate,
		&i.LastBoughtDate,
		&i.Description,
		&i.TextFront,
		&i.TextInside,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, created_at, updated_at, type, sku, upc, status, cost, price, envelope, artist, category, release_date, last_bought_date, description, text_front, text_inside FROM products ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.query(ctx, q.listProductsStmt, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Sku,
			&i.Upc,
			&i.Status,
			&i.Cost,
			&i.Price,
			&i.Envelope,
			&i.Artist,
			&i.Category,
			&i.ReleaseDate,
			&i.LastBoughtDate,
			&i.Description,
			&i.TextFront,
			&i.TextInside,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products SET
    type = $2,
    sku = $3,
    upc = $4,
    status = $5,
    cost = $6,
    price = $7,
    envelope = $8,
    artist = $9,
    category = $10,
    release_date = $11,
    last_bought_date = $12,
    description = $13,
    text_front = $14,
    text_inside = $15,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, created_at, updated_at, type, sku, upc, status, cost, price, envelope, artist, category, release_date, last_bought_date, description, text_front, text_inside
`

type UpdateProductParams struct {
	ID             uuid.UUID      `json:"id"`
	Type           string         `json:"type"`
	Sku            string         `json:"sku"`
	Upc            string         `json:"upc"`
	Status         string         `json:"status"`
	Cost           string         `json:"cost"`
	Price          string         `json:"price"`
	Envelope       sql.NullString `json:"envelope"`
	Artist         sql.NullString `json:"artist"`
	Category       sql.NullString `json:"category"`
	ReleaseDate    sql.NullTime   `json:"release_date"`
	LastBoughtDate sql.NullTime   `json:"last_bought_date"`
	Description    sql.NullString `json:"description"`
	TextFront      sql.NullString `json:"text_front"`
	TextInside     sql.NullString `json:"text_inside"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.updateProductStmt, updateProduct,
		arg.ID,
		arg.Type,
		arg.Sku,
		arg.Upc,
		arg.Status,
		arg.Cost,
		arg.Price,
		arg.Envelope,
		arg.Artist,
		arg.Category,
		arg.ReleaseDate,
		arg.LastBoughtDate,
		arg.Description,
		arg.TextFront,
		arg.TextInside,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Sku,
		&i.Upc,
		&i.Status,
		&i.Cost,
		&i.Price,
		&i.Envelope,
		&i.Artist,
		&i.Category,
		&i.ReleaseDate,
		&i.LastBoughtDate,
		&i.Description,
		&i.TextFront,
		&i.TextInside,
	)
	return i, err
}

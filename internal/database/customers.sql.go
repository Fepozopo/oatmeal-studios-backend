// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package database

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (business_name, contact_name, email, phone, address_1, address_2, city, state, zip_code, country, terms, discount, commission, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING id, created_at, updated_at, business_name, contact_name, email, phone, address_1, address_2, city, state, zip_code, terms, discount, commission, notes, country
`

type CreateCustomerParams struct {
	BusinessName string         `json:"business_name"`
	ContactName  sql.NullString `json:"contact_name"`
	Email        sql.NullString `json:"email"`
	Phone        sql.NullString `json:"phone"`
	Address1     string         `json:"address_1"`
	Address2     sql.NullString `json:"address_2"`
	City         string         `json:"city"`
	State        string         `json:"state"`
	ZipCode      string         `json:"zip_code"`
	Country      string         `json:"country"`
	Terms        string         `json:"terms"`
	Discount     float64        `json:"discount"`
	Commission   float64        `json:"commission"`
	Notes        sql.NullString `json:"notes"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.queryRow(ctx, q.createCustomerStmt, createCustomer,
		arg.BusinessName,
		arg.ContactName,
		arg.Email,
		arg.Phone,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
		arg.Terms,
		arg.Discount,
		arg.Commission,
		arg.Notes,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BusinessName,
		&i.ContactName,
		&i.Email,
		&i.Phone,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Terms,
		&i.Discount,
		&i.Commission,
		&i.Notes,
		&i.Country,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteCustomerStmt, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, created_at, updated_at, business_name, contact_name, email, phone, address_1, address_2, city, state, zip_code, terms, discount, commission, notes, country
FROM customers
WHERE id = $1
`

func (q *Queries) GetCustomer(ctx context.Context, id int32) (Customer, error) {
	row := q.queryRow(ctx, q.getCustomerStmt, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BusinessName,
		&i.ContactName,
		&i.Email,
		&i.Phone,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Terms,
		&i.Discount,
		&i.Commission,
		&i.Notes,
		&i.Country,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, created_at, updated_at, business_name, contact_name, email, phone, address_1, address_2, city, state, zip_code, terms, discount, commission, notes, country
FROM customers
ORDER BY business_name
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.query(ctx, q.listCustomersStmt, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BusinessName,
			&i.ContactName,
			&i.Email,
			&i.Phone,
			&i.Address1,
			&i.Address2,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Terms,
			&i.Discount,
			&i.Commission,
			&i.Notes,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET business_name = $2,
    contact_name = $3,
    email = $4,
    phone = $5,
    address_1 = $6,
    address_2 = $7,
    city = $8,
    state = $9,
    zip_code = $10,
    country = $11,
    terms = $12,
    discount = $13,
    commission = $14,
    notes = $15,
    updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, business_name, contact_name, email, phone, address_1, address_2, city, state, zip_code, terms, discount, commission, notes, country
`

type UpdateCustomerParams struct {
	ID           int32          `json:"id"`
	BusinessName string         `json:"business_name"`
	ContactName  sql.NullString `json:"contact_name"`
	Email        sql.NullString `json:"email"`
	Phone        sql.NullString `json:"phone"`
	Address1     string         `json:"address_1"`
	Address2     sql.NullString `json:"address_2"`
	City         string         `json:"city"`
	State        string         `json:"state"`
	ZipCode      string         `json:"zip_code"`
	Country      string         `json:"country"`
	Terms        string         `json:"terms"`
	Discount     float64        `json:"discount"`
	Commission   float64        `json:"commission"`
	Notes        sql.NullString `json:"notes"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.queryRow(ctx, q.updateCustomerStmt, updateCustomer,
		arg.ID,
		arg.BusinessName,
		arg.ContactName,
		arg.Email,
		arg.Phone,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
		arg.Terms,
		arg.Discount,
		arg.Commission,
		arg.Notes,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BusinessName,
		&i.ContactName,
		&i.Email,
		&i.Phone,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Terms,
		&i.Discount,
		&i.Commission,
		&i.Notes,
		&i.Country,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_items.sql

package database

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, item, quantity, price, discount, item_total)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, order_id, item, quantity, price, discount, item_total
`

type CreateOrderItemParams struct {
	OrderID   int32  `json:"order_id"`
	Item      string `json:"item"`
	Quantity  int32  `json:"quantity"`
	Price     string `json:"price"`
	Discount  string `json:"discount"`
	ItemTotal string `json:"item_total"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.queryRow(ctx, q.createOrderItemStmt, createOrderItem,
		arg.OrderID,
		arg.Item,
		arg.Quantity,
		arg.Price,
		arg.Discount,
		arg.ItemTotal,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Item,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.ItemTotal,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteOrderItemStmt, deleteOrderItem, id)
	return err
}

const deleteOrderItemsByOrderID = `-- name: DeleteOrderItemsByOrderID :exec
DELETE FROM order_items
WHERE order_id = $1
`

func (q *Queries) DeleteOrderItemsByOrderID(ctx context.Context, orderID int32) error {
	_, err := q.exec(ctx, q.deleteOrderItemsByOrderIDStmt, deleteOrderItemsByOrderID, orderID)
	return err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT id, order_id, item, quantity, price, discount, item_total
FROM order_items
WHERE id = $1
`

func (q *Queries) GetOrderItem(ctx context.Context, id int32) (OrderItem, error) {
	row := q.queryRow(ctx, q.getOrderItemStmt, getOrderItem, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Item,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.ItemTotal,
	)
	return i, err
}

const listOrderItemsByOrderID = `-- name: ListOrderItemsByOrderID :many
SELECT id, order_id, item, quantity, price, discount, item_total
FROM order_items
WHERE order_id = $1
`

func (q *Queries) ListOrderItemsByOrderID(ctx context.Context, orderID int32) ([]OrderItem, error) {
	rows, err := q.query(ctx, q.listOrderItemsByOrderIDStmt, listOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Item,
			&i.Quantity,
			&i.Price,
			&i.Discount,
			&i.ItemTotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_items
SET item = $2,
    quantity = $3,
    price = $4,
    discount = $5,
    item_total = $6
WHERE id = $1
RETURNING id, order_id, item, quantity, price, discount, item_total
`

type UpdateOrderItemParams struct {
	ID        int32  `json:"id"`
	Item      string `json:"item"`
	Quantity  int32  `json:"quantity"`
	Price     string `json:"price"`
	Discount  string `json:"discount"`
	ItemTotal string `json:"item_total"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.queryRow(ctx, q.updateOrderItemStmt, updateOrderItem,
		arg.ID,
		arg.Item,
		arg.Quantity,
		arg.Price,
		arg.Discount,
		arg.ItemTotal,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Item,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.ItemTotal,
	)
	return i, err
}

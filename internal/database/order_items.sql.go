// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_items.sql

package database

import (
	"context"
	"database/sql"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, sku, quantity, price, discount, item_total, pocket_number)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, order_id, sku, quantity, price, discount, item_total, pocket_number
`

type CreateOrderItemParams struct {
	OrderID      int32         `json:"order_id"`
	Sku          string        `json:"sku"`
	Quantity     int32         `json:"quantity"`
	Price        float64       `json:"price"`
	Discount     float64       `json:"discount"`
	ItemTotal    float64       `json:"item_total"`
	PocketNumber sql.NullInt32 `json:"pocket_number"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.queryRow(ctx, q.createOrderItemStmt, createOrderItem,
		arg.OrderID,
		arg.Sku,
		arg.Quantity,
		arg.Price,
		arg.Discount,
		arg.ItemTotal,
		arg.PocketNumber,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Sku,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.ItemTotal,
		&i.PocketNumber,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteOrderItemStmt, deleteOrderItem, id)
	return err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT id, order_id, sku, quantity, price, discount, item_total, pocket_number
FROM order_items
WHERE id = $1
`

func (q *Queries) GetOrderItem(ctx context.Context, id int32) (OrderItem, error) {
	row := q.queryRow(ctx, q.getOrderItemStmt, getOrderItem, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Sku,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.ItemTotal,
		&i.PocketNumber,
	)
	return i, err
}

const listOrderItemsBySKU = `-- name: ListOrderItemsBySKU :many
SELECT id, order_id, sku, quantity, price, discount, item_total, pocket_number
FROM order_items
WHERE sku = $1
`

func (q *Queries) ListOrderItemsBySKU(ctx context.Context, sku string) ([]OrderItem, error) {
	rows, err := q.query(ctx, q.listOrderItemsBySKUStmt, listOrderItemsBySKU, sku)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Sku,
			&i.Quantity,
			&i.Price,
			&i.Discount,
			&i.ItemTotal,
			&i.PocketNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_items
SET sku = $2,
    quantity = $3,
    price = $4,
    discount = $5,
    item_total = $6,
    pocket_number = $7
WHERE id = $1
RETURNING id, order_id, sku, quantity, price, discount, item_total, pocket_number
`

type UpdateOrderItemParams struct {
	ID           int32         `json:"id"`
	Sku          string        `json:"sku"`
	Quantity     int32         `json:"quantity"`
	Price        float64       `json:"price"`
	Discount     float64       `json:"discount"`
	ItemTotal    float64       `json:"item_total"`
	PocketNumber sql.NullInt32 `json:"pocket_number"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.queryRow(ctx, q.updateOrderItemStmt, updateOrderItem,
		arg.ID,
		arg.Sku,
		arg.Quantity,
		arg.Price,
		arg.Discount,
		arg.ItemTotal,
		arg.PocketNumber,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Sku,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.ItemTotal,
		&i.PocketNumber,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sales_reps.sql

package database

import (
	"context"
	"database/sql"
)

const createSalesRep = `-- name: CreateSalesRep :one
INSERT INTO sales_reps (status, rep_code, first_name, last_name, company, address_1, address_2, city, state, country, zip_code, phone, email, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, NOW(), NOW())
RETURNING id, created_at, updated_at, status, first_name, last_name, company, address_1, address_2, city, state, zip_code, email, phone, country, rep_code
`

type CreateSalesRepParams struct {
	Status    string         `json:"status"`
	RepCode   string         `json:"rep_code"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Company   string         `json:"company"`
	Address1  sql.NullString `json:"address_1"`
	Address2  sql.NullString `json:"address_2"`
	City      sql.NullString `json:"city"`
	State     sql.NullString `json:"state"`
	Country   string         `json:"country"`
	ZipCode   sql.NullString `json:"zip_code"`
	Phone     sql.NullString `json:"phone"`
	Email     sql.NullString `json:"email"`
}

func (q *Queries) CreateSalesRep(ctx context.Context, arg CreateSalesRepParams) (SalesRep, error) {
	row := q.queryRow(ctx, q.createSalesRepStmt, createSalesRep,
		arg.Status,
		arg.RepCode,
		arg.FirstName,
		arg.LastName,
		arg.Company,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.Country,
		arg.ZipCode,
		arg.Phone,
		arg.Email,
	)
	var i SalesRep
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.FirstName,
		&i.LastName,
		&i.Company,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Email,
		&i.Phone,
		&i.Country,
		&i.RepCode,
	)
	return i, err
}

const deleteSalesRep = `-- name: DeleteSalesRep :exec
DELETE FROM sales_reps
WHERE id = $1
`

func (q *Queries) DeleteSalesRep(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteSalesRepStmt, deleteSalesRep, id)
	return err
}

const getSalesRep = `-- name: GetSalesRep :one
SELECT id, created_at, updated_at, status, first_name, last_name, company, address_1, address_2, city, state, zip_code, email, phone, country, rep_code
FROM sales_reps
WHERE id = $1
`

func (q *Queries) GetSalesRep(ctx context.Context, id int32) (SalesRep, error) {
	row := q.queryRow(ctx, q.getSalesRepStmt, getSalesRep, id)
	var i SalesRep
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.FirstName,
		&i.LastName,
		&i.Company,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Email,
		&i.Phone,
		&i.Country,
		&i.RepCode,
	)
	return i, err
}

const listSalesReps = `-- name: ListSalesReps :many
SELECT id, created_at, updated_at, status, first_name, last_name, company, address_1, address_2, city, state, zip_code, email, phone, country, rep_code
FROM sales_reps
ORDER BY company
`

func (q *Queries) ListSalesReps(ctx context.Context) ([]SalesRep, error) {
	rows, err := q.query(ctx, q.listSalesRepsStmt, listSalesReps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesRep
	for rows.Next() {
		var i SalesRep
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.FirstName,
			&i.LastName,
			&i.Company,
			&i.Address1,
			&i.Address2,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Email,
			&i.Phone,
			&i.Country,
			&i.RepCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSalesRep = `-- name: UpdateSalesRep :one
UPDATE sales_reps
SET status = $2,
    rep_code = $13,
    first_name = $3,
    last_name = $4,
    company = $5,
    address_1 = $6,
    address_2 = $7,
    city = $8,
    state = $9,
    zip_code = $10,
    country = $11,
    phone = $12,
    email = $14,
    updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, status, first_name, last_name, company, address_1, address_2, city, state, zip_code, email, phone, country, rep_code
`

type UpdateSalesRepParams struct {
	ID        int32          `json:"id"`
	Status    string         `json:"status"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Company   string         `json:"company"`
	Address1  sql.NullString `json:"address_1"`
	Address2  sql.NullString `json:"address_2"`
	City      sql.NullString `json:"city"`
	State     sql.NullString `json:"state"`
	ZipCode   sql.NullString `json:"zip_code"`
	Country   string         `json:"country"`
	Phone     sql.NullString `json:"phone"`
	RepCode   string         `json:"rep_code"`
	Email     sql.NullString `json:"email"`
}

func (q *Queries) UpdateSalesRep(ctx context.Context, arg UpdateSalesRepParams) (SalesRep, error) {
	row := q.queryRow(ctx, q.updateSalesRepStmt, updateSalesRep,
		arg.ID,
		arg.Status,
		arg.FirstName,
		arg.LastName,
		arg.Company,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
		arg.Phone,
		arg.RepCode,
		arg.Email,
	)
	var i SalesRep
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.FirstName,
		&i.LastName,
		&i.Company,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Email,
		&i.Phone,
		&i.Country,
		&i.RepCode,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: invoices.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (invoice_date, order_id, customer_id, customer_location_id, due_date, status, total)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, invoice_date, order_id, customer_id, customer_location_id, due_date, status, total
`

type CreateInvoiceParams struct {
	InvoiceDate        time.Time     `json:"invoice_date"`
	OrderID            int32         `json:"order_id"`
	CustomerID         int32         `json:"customer_id"`
	CustomerLocationID sql.NullInt32 `json:"customer_location_id"`
	DueDate            time.Time     `json:"due_date"`
	Status             string        `json:"status"`
	Total              float64       `json:"total"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.queryRow(ctx, q.createInvoiceStmt, createInvoice,
		arg.InvoiceDate,
		arg.OrderID,
		arg.CustomerID,
		arg.CustomerLocationID,
		arg.DueDate,
		arg.Status,
		arg.Total,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InvoiceDate,
		&i.OrderID,
		&i.CustomerID,
		&i.CustomerLocationID,
		&i.DueDate,
		&i.Status,
		&i.Total,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoices
WHERE id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteInvoiceStmt, deleteInvoice, id)
	return err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, created_at, updated_at, invoice_date, order_id, customer_id, customer_location_id, due_date, status, total
FROM invoices
WHERE id = $1
`

func (q *Queries) GetInvoice(ctx context.Context, id int32) (Invoice, error) {
	row := q.queryRow(ctx, q.getInvoiceStmt, getInvoice, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InvoiceDate,
		&i.OrderID,
		&i.CustomerID,
		&i.CustomerLocationID,
		&i.DueDate,
		&i.Status,
		&i.Total,
	)
	return i, err
}

const getInvoicesByOrder = `-- name: GetInvoicesByOrder :one
SELECT id, created_at, updated_at, invoice_date, order_id, customer_id, customer_location_id, due_date, status, total
FROM invoices
WHERE order_id = $1
`

func (q *Queries) GetInvoicesByOrder(ctx context.Context, orderID int32) (Invoice, error) {
	row := q.queryRow(ctx, q.getInvoicesByOrderStmt, getInvoicesByOrder, orderID)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InvoiceDate,
		&i.OrderID,
		&i.CustomerID,
		&i.CustomerLocationID,
		&i.DueDate,
		&i.Status,
		&i.Total,
	)
	return i, err
}

const listInvoicesByCustomer = `-- name: ListInvoicesByCustomer :many
SELECT id, created_at, updated_at, invoice_date, order_id, customer_id, customer_location_id, due_date, status, total
FROM invoices
WHERE customer_id = $1
ORDER BY invoice_date DESC
`

func (q *Queries) ListInvoicesByCustomer(ctx context.Context, customerID int32) ([]Invoice, error) {
	rows, err := q.query(ctx, q.listInvoicesByCustomerStmt, listInvoicesByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.InvoiceDate,
			&i.OrderID,
			&i.CustomerID,
			&i.CustomerLocationID,
			&i.DueDate,
			&i.Status,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvoicesByCustomerLocation = `-- name: ListInvoicesByCustomerLocation :many
SELECT id, created_at, updated_at, invoice_date, order_id, customer_id, customer_location_id, due_date, status, total
FROM invoices
WHERE customer_location_id = $1
ORDER BY invoice_date DESC
`

func (q *Queries) ListInvoicesByCustomerLocation(ctx context.Context, customerLocationID sql.NullInt32) ([]Invoice, error) {
	rows, err := q.query(ctx, q.listInvoicesByCustomerLocationStmt, listInvoicesByCustomerLocation, customerLocationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.InvoiceDate,
			&i.OrderID,
			&i.CustomerID,
			&i.CustomerLocationID,
			&i.DueDate,
			&i.Status,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoice = `-- name: UpdateInvoice :one
UPDATE invoices
SET invoice_date = $2,
    order_id = $3,
    customer_id = $4,
    customer_location_id = $5,
    due_date = $6,
    status = $7,
    total = $8,
    updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, invoice_date, order_id, customer_id, customer_location_id, due_date, status, total
`

type UpdateInvoiceParams struct {
	ID                 int32         `json:"id"`
	InvoiceDate        time.Time     `json:"invoice_date"`
	OrderID            int32         `json:"order_id"`
	CustomerID         int32         `json:"customer_id"`
	CustomerLocationID sql.NullInt32 `json:"customer_location_id"`
	DueDate            time.Time     `json:"due_date"`
	Status             string        `json:"status"`
	Total              float64       `json:"total"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) (Invoice, error) {
	row := q.queryRow(ctx, q.updateInvoiceStmt, updateInvoice,
		arg.ID,
		arg.InvoiceDate,
		arg.OrderID,
		arg.CustomerID,
		arg.CustomerLocationID,
		arg.DueDate,
		arg.Status,
		arg.Total,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InvoiceDate,
		&i.OrderID,
		&i.CustomerID,
		&i.CustomerLocationID,
		&i.DueDate,
		&i.Status,
		&i.Total,
	)
	return i, err
}

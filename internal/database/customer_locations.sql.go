// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer_locations.sql

package database

import (
	"context"
	"database/sql"
)

const createCustomerLocation = `-- name: CreateCustomerLocation :one
INSERT INTO customer_locations (
    customer_id, business_name, contact_name, address_1, address_2, city, state, zip_code, country, phone, sales_rep, notes
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING id, customer_id, address_1, address_2, city, state, zip_code, phone, notes, created_at, updated_at, business_name, contact_name, country, sales_rep
`

type CreateCustomerLocationParams struct {
	CustomerID   int32          `json:"customer_id"`
	BusinessName string         `json:"business_name"`
	ContactName  sql.NullString `json:"contact_name"`
	Address1     string         `json:"address_1"`
	Address2     sql.NullString `json:"address_2"`
	City         string         `json:"city"`
	State        string         `json:"state"`
	ZipCode      string         `json:"zip_code"`
	Country      string         `json:"country"`
	Phone        sql.NullString `json:"phone"`
	SalesRep     sql.NullString `json:"sales_rep"`
	Notes        sql.NullString `json:"notes"`
}

func (q *Queries) CreateCustomerLocation(ctx context.Context, arg CreateCustomerLocationParams) (CustomerLocation, error) {
	row := q.queryRow(ctx, q.createCustomerLocationStmt, createCustomerLocation,
		arg.CustomerID,
		arg.BusinessName,
		arg.ContactName,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
		arg.Phone,
		arg.SalesRep,
		arg.Notes,
	)
	var i CustomerLocation
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Phone,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BusinessName,
		&i.ContactName,
		&i.Country,
		&i.SalesRep,
	)
	return i, err
}

const deleteCustomerLocation = `-- name: DeleteCustomerLocation :exec
DELETE FROM customer_locations WHERE id = $1
`

func (q *Queries) DeleteCustomerLocation(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteCustomerLocationStmt, deleteCustomerLocation, id)
	return err
}

const getCustomerLocationByID = `-- name: GetCustomerLocationByID :one
SELECT id, customer_id, address_1, address_2, city, state, zip_code, phone, notes, created_at, updated_at, business_name, contact_name, country, sales_rep FROM customer_locations WHERE id = $1
`

func (q *Queries) GetCustomerLocationByID(ctx context.Context, id int32) (CustomerLocation, error) {
	row := q.queryRow(ctx, q.getCustomerLocationByIDStmt, getCustomerLocationByID, id)
	var i CustomerLocation
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Phone,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BusinessName,
		&i.ContactName,
		&i.Country,
		&i.SalesRep,
	)
	return i, err
}

const listCustomerLocationsByCustomer = `-- name: ListCustomerLocationsByCustomer :many
SELECT id, customer_id, address_1, address_2, city, state, zip_code, phone, notes, created_at, updated_at, business_name, contact_name, country, sales_rep FROM customer_locations WHERE customer_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListCustomerLocationsByCustomer(ctx context.Context, customerID int32) ([]CustomerLocation, error) {
	rows, err := q.query(ctx, q.listCustomerLocationsByCustomerStmt, listCustomerLocationsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomerLocation
	for rows.Next() {
		var i CustomerLocation
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Address1,
			&i.Address2,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Phone,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BusinessName,
			&i.ContactName,
			&i.Country,
			&i.SalesRep,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomerLocation = `-- name: UpdateCustomerLocation :one
UPDATE customer_locations SET
    business_name = $2,
    contact_name = $3,
    address_1 = $4,
    address_2 = $5,
    city = $6,
    state = $7,
    zip_code = $8,
    country = $9,
    phone = $10,
    sales_rep = $11,
    notes = $12,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, customer_id, address_1, address_2, city, state, zip_code, phone, notes, created_at, updated_at, business_name, contact_name, country, sales_rep
`

type UpdateCustomerLocationParams struct {
	ID           int32          `json:"id"`
	BusinessName string         `json:"business_name"`
	ContactName  sql.NullString `json:"contact_name"`
	Address1     string         `json:"address_1"`
	Address2     sql.NullString `json:"address_2"`
	City         string         `json:"city"`
	State        string         `json:"state"`
	ZipCode      string         `json:"zip_code"`
	Country      string         `json:"country"`
	Phone        sql.NullString `json:"phone"`
	SalesRep     sql.NullString `json:"sales_rep"`
	Notes        sql.NullString `json:"notes"`
}

func (q *Queries) UpdateCustomerLocation(ctx context.Context, arg UpdateCustomerLocationParams) (CustomerLocation, error) {
	row := q.queryRow(ctx, q.updateCustomerLocationStmt, updateCustomerLocation,
		arg.ID,
		arg.BusinessName,
		arg.ContactName,
		arg.Address1,
		arg.Address2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
		arg.Phone,
		arg.SalesRep,
		arg.Notes,
	)
	var i CustomerLocation
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Address1,
		&i.Address2,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Phone,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BusinessName,
		&i.ContactName,
		&i.Country,
		&i.SalesRep,
	)
	return i, err
}

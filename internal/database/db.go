// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCustomerStmt, err = db.PrepareContext(ctx, createCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCustomer: %w", err)
	}
	if q.createOrderStmt, err = db.PrepareContext(ctx, createOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrder: %w", err)
	}
	if q.createOrderItemStmt, err = db.PrepareContext(ctx, createOrderItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrderItem: %w", err)
	}
	if q.createProductStmt, err = db.PrepareContext(ctx, createProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProduct: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAllUsersStmt, err = db.PrepareContext(ctx, deleteAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllUsers: %w", err)
	}
	if q.deleteCustomerStmt, err = db.PrepareContext(ctx, deleteCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCustomer: %w", err)
	}
	if q.deleteOrderStmt, err = db.PrepareContext(ctx, deleteOrder); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOrder: %w", err)
	}
	if q.deleteOrderItemStmt, err = db.PrepareContext(ctx, deleteOrderItem); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOrderItem: %w", err)
	}
	if q.deleteOrderItemsByOrderIDStmt, err = db.PrepareContext(ctx, deleteOrderItemsByOrderID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOrderItemsByOrderID: %w", err)
	}
	if q.deleteProductStmt, err = db.PrepareContext(ctx, deleteProduct); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProduct: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getCustomerStmt, err = db.PrepareContext(ctx, getCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomer: %w", err)
	}
	if q.getOrderStmt, err = db.PrepareContext(ctx, getOrder); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrder: %w", err)
	}
	if q.getOrderItemStmt, err = db.PrepareContext(ctx, getOrderItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrderItem: %w", err)
	}
	if q.getProductByIDStmt, err = db.PrepareContext(ctx, getProductByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductByID: %w", err)
	}
	if q.getProductBySKUStmt, err = db.PrepareContext(ctx, getProductBySKU); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductBySKU: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listCustomersStmt, err = db.PrepareContext(ctx, listCustomers); err != nil {
		return nil, fmt.Errorf("error preparing query ListCustomers: %w", err)
	}
	if q.listOrderItemsByOrderIDStmt, err = db.PrepareContext(ctx, listOrderItemsByOrderID); err != nil {
		return nil, fmt.Errorf("error preparing query ListOrderItemsByOrderID: %w", err)
	}
	if q.listOrdersStmt, err = db.PrepareContext(ctx, listOrders); err != nil {
		return nil, fmt.Errorf("error preparing query ListOrders: %w", err)
	}
	if q.listProductsStmt, err = db.PrepareContext(ctx, listProducts); err != nil {
		return nil, fmt.Errorf("error preparing query ListProducts: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateCustomerStmt, err = db.PrepareContext(ctx, updateCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCustomer: %w", err)
	}
	if q.updateOrderStmt, err = db.PrepareContext(ctx, updateOrder); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrder: %w", err)
	}
	if q.updateOrderItemStmt, err = db.PrepareContext(ctx, updateOrderItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOrderItem: %w", err)
	}
	if q.updateProductStmt, err = db.PrepareContext(ctx, updateProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProduct: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCustomerStmt != nil {
		if cerr := q.createCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCustomerStmt: %w", cerr)
		}
	}
	if q.createOrderStmt != nil {
		if cerr := q.createOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderStmt: %w", cerr)
		}
	}
	if q.createOrderItemStmt != nil {
		if cerr := q.createOrderItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderItemStmt: %w", cerr)
		}
	}
	if q.createProductStmt != nil {
		if cerr := q.createProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProductStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAllUsersStmt != nil {
		if cerr := q.deleteAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllUsersStmt: %w", cerr)
		}
	}
	if q.deleteCustomerStmt != nil {
		if cerr := q.deleteCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCustomerStmt: %w", cerr)
		}
	}
	if q.deleteOrderStmt != nil {
		if cerr := q.deleteOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOrderStmt: %w", cerr)
		}
	}
	if q.deleteOrderItemStmt != nil {
		if cerr := q.deleteOrderItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOrderItemStmt: %w", cerr)
		}
	}
	if q.deleteOrderItemsByOrderIDStmt != nil {
		if cerr := q.deleteOrderItemsByOrderIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOrderItemsByOrderIDStmt: %w", cerr)
		}
	}
	if q.deleteProductStmt != nil {
		if cerr := q.deleteProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProductStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getCustomerStmt != nil {
		if cerr := q.getCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerStmt: %w", cerr)
		}
	}
	if q.getOrderStmt != nil {
		if cerr := q.getOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderStmt: %w", cerr)
		}
	}
	if q.getOrderItemStmt != nil {
		if cerr := q.getOrderItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderItemStmt: %w", cerr)
		}
	}
	if q.getProductByIDStmt != nil {
		if cerr := q.getProductByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductByIDStmt: %w", cerr)
		}
	}
	if q.getProductBySKUStmt != nil {
		if cerr := q.getProductBySKUStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductBySKUStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listCustomersStmt != nil {
		if cerr := q.listCustomersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCustomersStmt: %w", cerr)
		}
	}
	if q.listOrderItemsByOrderIDStmt != nil {
		if cerr := q.listOrderItemsByOrderIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOrderItemsByOrderIDStmt: %w", cerr)
		}
	}
	if q.listOrdersStmt != nil {
		if cerr := q.listOrdersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOrdersStmt: %w", cerr)
		}
	}
	if q.listProductsStmt != nil {
		if cerr := q.listProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProductsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateCustomerStmt != nil {
		if cerr := q.updateCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCustomerStmt: %w", cerr)
		}
	}
	if q.updateOrderStmt != nil {
		if cerr := q.updateOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrderStmt: %w", cerr)
		}
	}
	if q.updateOrderItemStmt != nil {
		if cerr := q.updateOrderItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOrderItemStmt: %w", cerr)
		}
	}
	if q.updateProductStmt != nil {
		if cerr := q.updateProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createCustomerStmt            *sql.Stmt
	createOrderStmt               *sql.Stmt
	createOrderItemStmt           *sql.Stmt
	createProductStmt             *sql.Stmt
	createUserStmt                *sql.Stmt
	deleteAllUsersStmt            *sql.Stmt
	deleteCustomerStmt            *sql.Stmt
	deleteOrderStmt               *sql.Stmt
	deleteOrderItemStmt           *sql.Stmt
	deleteOrderItemsByOrderIDStmt *sql.Stmt
	deleteProductStmt             *sql.Stmt
	deleteUserStmt                *sql.Stmt
	getCustomerStmt               *sql.Stmt
	getOrderStmt                  *sql.Stmt
	getOrderItemStmt              *sql.Stmt
	getProductByIDStmt            *sql.Stmt
	getProductBySKUStmt           *sql.Stmt
	getUserStmt                   *sql.Stmt
	listCustomersStmt             *sql.Stmt
	listOrderItemsByOrderIDStmt   *sql.Stmt
	listOrdersStmt                *sql.Stmt
	listProductsStmt              *sql.Stmt
	listUsersStmt                 *sql.Stmt
	updateCustomerStmt            *sql.Stmt
	updateOrderStmt               *sql.Stmt
	updateOrderItemStmt           *sql.Stmt
	updateProductStmt             *sql.Stmt
	updateUserStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createCustomerStmt:            q.createCustomerStmt,
		createOrderStmt:               q.createOrderStmt,
		createOrderItemStmt:           q.createOrderItemStmt,
		createProductStmt:             q.createProductStmt,
		createUserStmt:                q.createUserStmt,
		deleteAllUsersStmt:            q.deleteAllUsersStmt,
		deleteCustomerStmt:            q.deleteCustomerStmt,
		deleteOrderStmt:               q.deleteOrderStmt,
		deleteOrderItemStmt:           q.deleteOrderItemStmt,
		deleteOrderItemsByOrderIDStmt: q.deleteOrderItemsByOrderIDStmt,
		deleteProductStmt:             q.deleteProductStmt,
		deleteUserStmt:                q.deleteUserStmt,
		getCustomerStmt:               q.getCustomerStmt,
		getOrderStmt:                  q.getOrderStmt,
		getOrderItemStmt:              q.getOrderItemStmt,
		getProductByIDStmt:            q.getProductByIDStmt,
		getProductBySKUStmt:           q.getProductBySKUStmt,
		getUserStmt:                   q.getUserStmt,
		listCustomersStmt:             q.listCustomersStmt,
		listOrderItemsByOrderIDStmt:   q.listOrderItemsByOrderIDStmt,
		listOrdersStmt:                q.listOrdersStmt,
		listProductsStmt:              q.listProductsStmt,
		listUsersStmt:                 q.listUsersStmt,
		updateCustomerStmt:            q.updateCustomerStmt,
		updateOrderStmt:               q.updateOrderStmt,
		updateOrderItemStmt:           q.updateOrderItemStmt,
		updateProductStmt:             q.updateProductStmt,
		updateUserStmt:                q.updateUserStmt,
	}
}
